name: Go

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    strategy:
      matrix:
        cfg:
          - { os: 'windows-2022', goos: 'windows', goarch: 'amd64', bin: 'Ikemen_GO.exe', cc: x86_64-w64-mingw32-gcc, ccx: x86_64-w64-mingw32-g++ }
          - { os: 'ubuntu-22.04', goos: 'linux',   goarch: 'amd64', bin: 'Ikemen_GO_Linux' }
          - { os: 'macos-11',     goos: 'darwin',  goarch: 'amd64', bin: 'Ikemen_GO_MacOS' }
          
    runs-on: ${{ matrix.cfg.os }}
    steps:
    - uses: actions/checkout@v3

    - name: Setup Golang with cache
      uses: magnetikonline/action-golang-cache@v3
      with:
        go-version: 1.20.1
        #go-version-file: go.mod
        #cache-key-suffix: -ikemen

    - name: Setup dependencies caches (windows)
      if: runner.os == 'windows'
      uses: actions/cache@v3
      with:
        path: |
          C:\ProgramData\chocolatey\lib\git*
          C:\ProgramData\chocolatey\lib\zip*
        key: ${{ runner.os }}-dependencies-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-dependencies-

    - name: Install dependencies
      run: |
        if [ "$RUNNER_OS" == "Linux" ]; then
          sudo apt-get update && sudo apt-get install -y libasound2-dev libgl1-mesa-dev xorg-dev libgtk-3-dev
        fi
      shell: bash

    - name: Build
      run: |
        go env -w GO111MODULE=on
        go mod download
        if [ "$RUNNER_OS" == "Windows" ]; then
          go build -v -ldflags "-H windowsgui" -o ./$binName ./src
        else
          go build -v -o ./$binName ./src
        fi
      shell: bash
      env:
        CGO_ENABLED: 1
        GOOS: ${{ matrix.cfg.goos }}
        GOARCH: ${{ matrix.cfg.goarch }}
        binName: ${{ matrix.cfg.bin }}
        #CC: ${{ matrix.cfg.cc }}
        #CCX: ${{ matrix.cfg.cxx }}

    - name: Deploy
      run: |
        echo "Deploying"
        mkdir deploy
        git clone https://github.com/ikemen-engine/Ikemen_GO-Elecbyte-Screenpack.git
        cp Ikemen_GO.exe deploy/
        echo "Preparing repo assets"
        if [[ "$OSTYPE" == "msys"* ]]; then
          xcopy /E /I data\* deploy\data\
          xcopy /E /I external\* deploy\external\
          echo "Preparing screenpack assets (Windows)"
          xcopy /E /I Ikemen_GO-Elecbyte-Screenpack\chars\* deploy\chars\
          xcopy /E /I Ikemen_GO-Elecbyte-Screenpack\data\* deploy\data\
          xcopy /E /I Ikemen_GO-Elecbyte-Screenpack\font\* deploy\font\
          xcopy /E /I Ikemen_GO-Elecbyte-Screenpack\stages\* deploy\stages\
          cp Ikemen_GO-Elecbyte-Screenpack\LICENCE.txt deploy\ScreenpackLicense.txt
          echo "Zipping deploy directory (Windows)"
          cd deploy
          "/c/Program Files/7-Zip/7z.exe" a ../Ikemen_GO-v1.0.7-windows.zip *
        else
          cp -R data/* deploy/data/
          cp -R external/* deploy/external/
          echo "Preparing screenpack assets (macOS/Linux)"
          cp -R Ikemen_GO-Elecbyte-Screenpack/chars/* deploy/chars/
          cp -R Ikemen_GO-Elecbyte-Screenpack/data/* deploy/data/
          cp -R Ikemen_GO-Elecbyte-Screenpack/font/* deploy/font/
          cp -R Ikemen_GO-Elecbyte-Screenpack/stages/* deploy/stages/
          cp Ikemen_GO-Elecbyte-Screenpack/LICENCE.txt deploy/ScreenpackLicense.txt
          echo "Zipping deploy directory (macOS/Linux)"
          cd deploy
          zip -r ../Ikemen_GO-v1.0.7-macos-linux.zip *
        fi
        echo "Successfully prepared assets for deployment"
