name: Go

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v3

    - name: Print cache key
      run: echo "${{ runner.os }}-go-${{ hashFiles('**/go.sum', '**/go.mod') }}"

    - name: Check cache status
      uses: actions/cache@v3
      with:
        path: |
          go/pkg/mod
          go/bin
          ${{ github.workspace }}/go
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum', '**/go.mod') }}
        restore-keys: |
          ${{ runner.os }}-go-
          ${{ runner.os }}-
          windows-go-
      id: cache-status

    - name: Delete unneeded cache (windows)
      uses: actions/cache@v3
      with:
        path: |
          go/pkg/mod
          go/bin
          ${{ github.workspace }}/go
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum', '**/go.mod') }}
        restore-keys: |
          ${{ runner.os }}-go-
          ${{ runner.os }}-
          windows-go-
      id: delete-cache
      if: steps.cache-status.outputs.cache-hit != 'true'

    - name: Cache Go modules and dependencies (windows)
      id: cache-windows-go
      uses: actions/cache@v3
      with:
        path: |
          go/pkg/mod
          go/bin
          ${{ github.workspace }}/go
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum', '**/go.mod') }}
        cache-max-age: '7d'

    - name: Set up Go (windows)
      uses: actions/setup-go@v3
      with:
        go-version: 1.20.1

    - name: Build (windows)
      if: steps.cache-status.outputs.cache-hit != 'true'
      # This will only run if the cache was a miss
      run: |
        echo "Installing dependencies (windows)"
        #choco install mingw
        choco install zip git
        echo "Building (windows)"
        set GOPATH=${{ github.workspace }}/go
        set CGO_ENABLED=1
        set CC=x86_64-w64-mingw32-gcc
        set CXX=x86_64-w64-mingw32-g++
        set GOOS=windows
        set GOARCH=amd64
        go env -w GO111MODULE=on
        go mod download
        go build -o ./Ikemen_GO.exe ./src
      # This will only run if the cache was a hit
      else:
        echo "Using cached dependencies (windows)"
        go build -o ./Ikemen_GO.exe ./src

    - name: Deploy (windows)
      run: |
        echo "Deploying (windows)"
        mkdir deploy
        cp Ikemen_GO.exe deploy\
        echo "Preparing repo assets (windows)"
        xcopy /E /I data\* deploy\data\
        xcopy /E /I external\* deploy\external\
        echo "Preparing screenpack assets (windows)"
        git clone https://github.com/ikemen-engine/Ikemen_GO-Elecbyte-Screenpack.git
        cd Ikemen_GO-Elecbyte-Screenpack       
        xcopy /E /I chars\* ${{ github.workspace }}\deploy\chars\
        xcopy /E /I data\* ${{ github.workspace }}\deploy\data\
        xcopy /E /I font\* ${{ github.workspace }}\deploy\font\
        xcopy /E /I stages\* ${{ github.workspace }}\deploy\stages\
        cp LICENCE.txt ${{ github.workspace }}\ScreenpackLicense.txt
        echo "Successfully prepared assets for deployment (windows)"

    - name: Create Release (windows)
      uses: softprops/action-gh-release@v1
      with:
        files: |
          ./deploy/*
        tag_name: v1.0.3-windows
        body: |
          Release version 1.0.3-windows
      env:
        GITHUB_TOKEN: ${{ secrets.IKEMEN_TOKEN }}
