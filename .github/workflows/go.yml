name: Go

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    strategy:
      matrix:
        cfg:
          - { os: 'windows-2022', goos: 'windows', goarch: 'amd64', bin: 'Ikemen_GO.exe', cc: x86_64-w64-mingw32-gcc, ccx: x86_64-w64-mingw32-g++ }
          - { os: 'ubuntu-22.04', goos: 'linux',   goarch: 'amd64', bin: 'Ikemen_GO_Linux' }
          - { os: 'macos-11',     goos: 'darwin',  goarch: 'amd64', bin: 'Ikemen_GO_MacOS' }
          
    runs-on: ${{ matrix.cfg.os }}
    steps:
    - uses: actions/checkout@v3

    - name: Setup Golang with cache
      uses: magnetikonline/action-golang-cache@v3
      with:
        go-version: 1.20.1
        #go-version-file: go.mod
        #cache-key-suffix: -ikemen

    - name: Install dependencies
      run: |
        if [ "$RUNNER_OS" == "Linux" ]; then
          sudo apt-get update && sudo apt-get install -y libasound2-dev libgl1-mesa-dev xorg-dev libgtk-3-dev
        fi
      shell: bash

    - name: Build
      run: |
        go env -w GO111MODULE=on
        go mod download
        if [ "$RUNNER_OS" == "Windows" ]; then
          go build -v -ldflags "-H windowsgui" -o ./$binName ./src
        else
          go build -v -o ./$binName ./src
        fi
      shell: bash
      env:
        CGO_ENABLED: 1
        GOOS: ${{ matrix.cfg.goos }}
        GOARCH: ${{ matrix.cfg.goarch }}
        binName: ${{ matrix.cfg.bin }}
        #CC: ${{ matrix.cfg.cc }}
        #CCX: ${{ matrix.cfg.cxx }}

    - name: Deploy
      run: |
        echo "Preparing files for deployment"
        mkdir deploy
        cp $binName deploy/
        git clone https://github.com/ikemen-engine/Ikemen_GO-Elecbyte-Screenpack.git
        cp -r data external Ikemen_GO-Elecbyte-Screenpack/chars Ikemen_GO-Elecbyte-Screenpack/data Ikemen_GO-Elecbyte-Screenpack/font Ikemen_GO-Elecbyte-Screenpack/stages deploy/
        cp Ikemen_GO-Elecbyte-Screenpack/LICENCE.txt deploy/ScreenpackLicense.txt
        echo "Zipping deploy directory"
        if [ "$RUNNER_OS" == "Windows" ]; then
          "/c/Program Files/7-Zip/7z.exe" a Ikemen_GO-dev-$goos.zip deploy/*
        else
          zip -r Ikemen_GO-dev-$goos.zip deploy/*
        fi
        echo "Successfully prepared assets for deployment"
      shell: bash
      env:
        goos: ${{ matrix.cfg.goos }}
        binName: ${{ matrix.cfg.bin }}

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          ./Ikemen_GO-dev-$goos.zip
        tag_name: nightly
        body: |
          Release version dev-$goos
      env:
        GITHUB_TOKEN: ${{ secrets.IKEMEN_TOKEN }}
        goos: ${{ matrix.cfg.goos }}
  
